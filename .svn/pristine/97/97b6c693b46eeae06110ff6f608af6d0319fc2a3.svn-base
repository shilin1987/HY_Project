using Dapper;
using Learun.Application.TwoDevelopment.HR_Code.HeterogeneousSystemInterface;
using Learun.Application.TwoDevelopment.Platform.ComparisonOfIdCardVerificationClass;
using Learun.DataBase.Repository;
using Learun.Util;
using System;
using System.Collections.Generic;
using System.Data;
using System.Text;

namespace Learun.Application.TwoDevelopment.Platform
{
    /// <summary>
    /// 版 本 Learun-ADMS V7.0.3 力软敏捷开发框架
    /// Copyright (c) 2013-2018 上海力软信息技术有限公司
    /// 创 建：超级管理员
    /// 日 期：2021-12-22 14:41
    /// 描 述：身份证信息读取对比
    /// </summary>
    public class ComparisonOfIdCardVerificationClassService : RepositoryFactory
    {
        #region 获取数据

        /// <summary>
        /// 获取页面显示列表数据
        /// <summary>
        /// <param name="queryJson">查询参数</param>
        /// <returns></returns>
        public IEnumerable<Hr_hy_ComparisonOfIdCardVerificationEntity> GetPageList(Pagination pagination, string queryJson)
        {
            try
            {
                var strSql = new StringBuilder();
                strSql.Append("SELECT ");
                strSql.Append(@"
                t.F_ID,
                t.F_UserName,
                t.F_CardID,
                t.F_Sex,
                t.F_State,
                t.F_OperatingTime,
                t.F_OperationPerson,
                t.F_InformationContrastDifference
                ");
                strSql.Append("  FROM Hr_hy_ComparisonOfIdCardVerification t ");
                strSql.Append("  WHERE 1=1 ");
                var queryParam = queryJson.ToJObject();
                // 虚拟参数
                var dp = new DynamicParameters(new { });
                if (!queryParam["F_UserName"].IsEmpty())
                {
                    dp.Add("F_UserName", "%" + queryParam["F_UserName"].ToString() + "%", DbType.String);
                    strSql.Append(" AND t.F_UserName Like @F_UserName ");
                }
                if (!queryParam["F_CardID"].IsEmpty())
                {
                    dp.Add("F_CardID", "%" + queryParam["F_CardID"].ToString() + "%", DbType.String);
                    strSql.Append(" AND t.F_CardID Like @F_CardID ");
                }
                if (!queryParam["F_State"].IsEmpty())
                {
                    dp.Add("F_State",queryParam["F_State"].ToString(), DbType.String);
                    strSql.Append(" AND t.F_State = @F_State ");
                }
                return this.BaseRepository().FindList<Hr_hy_ComparisonOfIdCardVerificationEntity>(strSql.ToString(),dp, pagination);
            }
            catch (Exception ex)
            {
                if (ex is ExceptionEx)
                {
                    throw;
                }
                else
                {
                    throw ExceptionEx.ThrowServiceException(ex);
                }
            }
        }

        /// <summary>
        /// 获取Hr_hy_ComparisonOfIdCardVerification表实体数据
        /// <param name="keyValue">主键</param>
        /// <summary>
        /// <returns></returns>
        public Hr_hy_ComparisonOfIdCardVerificationEntity GetHr_hy_ComparisonOfIdCardVerificationEntity(string keyValue)
        {
            try
            {
                return this.BaseRepository().FindEntity<Hr_hy_ComparisonOfIdCardVerificationEntity>(keyValue);
            }
            catch (Exception ex)
            {
                if (ex is ExceptionEx)
                {
                    throw;
                }
                else
                {
                    throw ExceptionEx.ThrowServiceException(ex);
                }
            }
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="jsonStr"></param>
        public void SaveKeepIdCard(string jsonStr)
        {
            try
            {
                Root root = (Root)JsonNewtonsoft.FromJSON<Root>(jsonStr);
                if ("1".Equals(root.code))
                {
                    //读取失败，修改自身状态 
                }
                else
                {
                    //读取成功1.认证对比2.修改信息
                    Hr_hy_ComparisonOfIdCardVerificationEntity hrcardEntity = this.BaseRepository().FindEntity<Hr_hy_ComparisonOfIdCardVerificationEntity>(t => t.F_CardID == root.IDCardInfo.cardID);
                    if (hrcardEntity != null)
                    {
                        //根据身份证查到信息
                        if (hrcardEntity.F_UserName.Equals(root.IDCardInfo.name))
                        {
                            //自动对比通过
                            hrcardEntity.F_State = 4;
                        }
                        else
                        {
                            //待人工检查
                            hrcardEntity.F_State = 3;
                            hrcardEntity.F_InformationContrastDifference = "人员姓名错误,请排查";
                        }
                        this.BaseRepository().Update(hrcardEntity);

                    }
                    else
                    {
                        //身份证号码错误,查看待核对人员里面是否错在人员
                        Hr_hy_ComparisonOfIdCardVerificationEntity hrcardEntityPerson = this.BaseRepository().FindEntity<Hr_hy_ComparisonOfIdCardVerificationEntity>(t => t.F_UserName == root.IDCardInfo.name && t.F_State == 1);
                        if (hrcardEntityPerson != null)
                        {
                            //待人工检查
                            hrcardEntityPerson.F_State = 3;
                            hrcardEntityPerson.F_InformationContrastDifference = "人员身份证号码出错";
                            this.BaseRepository().Update(hrcardEntityPerson);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                if (ex is ExceptionEx)
                {
                    throw;
                }
                else
                {
                    throw ExceptionEx.ThrowServiceException(ex);
                }
            }
        }

        #endregion

        #region 提交数据

        /// <summary>
        /// 删除实体数据
        /// <param name="keyValue">主键</param>
        /// <summary>
        /// <returns></returns>
        public void DeleteEntity(string keyValue)
        {
            try
            {
                this.BaseRepository().Delete<Hr_hy_ComparisonOfIdCardVerificationEntity>(t=>t.F_ID == keyValue);
            }
            catch (Exception ex)
            {
                if (ex is ExceptionEx)
                {
                    throw;
                }
                else
                {
                    throw ExceptionEx.ThrowServiceException(ex);
                }
            }
        }

        /// <summary>
        /// 保存实体数据（新增、修改）
        /// <param name="keyValue">主键</param>
        /// <summary>
        /// <returns></returns>
        public void SaveEntity(string keyValue, Hr_hy_ComparisonOfIdCardVerificationEntity entity)
        {
            try
            {
                if (!string.IsNullOrEmpty(keyValue))
                {
                    entity.Modify(keyValue);
                    this.BaseRepository().Update(entity);
                }
                else
                {
                    entity.Create();
                    this.BaseRepository().Insert(entity);
                }
            }
            catch (Exception ex)
            {
                if (ex is ExceptionEx)
                {
                    throw;
                }
                else
                {
                    throw ExceptionEx.ThrowServiceException(ex);
                }
            }
        }

        #endregion

    }
}
