using Dapper;
using Learun.Application.Organization;
using Learun.Application.TwoDevelopment.HR_WorkPermitModule;
using Learun.Application.TwoDevelopment.Platform.Wl_ChangeShifts;
using Learun.Application.TwoDevelopment.ReturnModel;
using Learun.DataBase.Repository;
using Learun.Util;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;

namespace Learun.Application.TwoDevelopment.Platform
{
    /// <summary>
    /// 版 本 Learun-ADMS V7.0.3 力软敏捷开发框架
    /// Copyright (c) 2013-2018 上海力软信息技术有限公司
    /// 创 建：超级管理员
    /// 日 期：2021-11-30 16:49
    /// 描 述：Wl_ChangeShifts
    /// </summary>
    public class Wl_ChangeShiftsService : RepositoryFactory
    {
        #region 构造函数和属性
        ReturnComment _return;
       
        private string fieldSql;
        public Wl_ChangeShiftsService()
        {
            fieldSql= @"
                t.F_EnabledMark,
                t.F_CreateUserId,
                t.F_ModifyUserName,
                t.F_ModifyUserId,
                t.F_DeleteMark,
                t.F_SortCode,
                t.F_ModifyDate,
                t.F_CreateUserName,
                t.F_CreateDate,
                t.F_Description,
                t.F_ID,
                t.F_UserID,
                u.F_FourLevelOrganization,
                u.F_PostID,
                u.F_Education,
                t.F_AssessmentDate,
                t.F_writtenExamination,
                t.F_OperationCapability,
                t.F_workingAttitude,
                t.F_Responsibility,
                t.F_SUM,
                t.F_OneAssessmentResults,
                t.F_OneReasonDescription,
                t.F_TwoAssessmentResults,
                t.F_TwoReasonDescription,
                t.F_ThreeAssessmentResults,
                t.F_ThreeReasonDescription,
                t.F_FourAssessmentResults,
                t.F_FourReasonDescription,
                t.F_FiveAssessmentResults,
                t.F_FiveReasonDescription,
                t.F_SixAssessmentResults,
                t.F_SixReasonDescription,
                t.F_OperationBPM,
                t.F_OperationDirector,
                t.F_OperationCharge,
                t.F_QualityManagement,
                t.F_HumanResources,
                t.F_NO,
                t.F_IsDownload,
                u.F_EnCode,
                u.F_RealName,
                u.F_Gender,
                d.F_FullName,
                o.F_State as F_States,
                t.F_PersonnelCategory,
                u.F_DateHoldingPost as F_AppointmentDate,
                t.F_TrialDate
            ";
            _return = new ReturnComment();
        }
        #endregion

        #region 获取数据

        /// <summary>
        /// 获取列表数据
        /// <summary>
        /// <returns></returns>
        public IEnumerable<Hy_Wl_ChangeShiftsEntity> GetList( string queryJson )
        {
            try
            {
                //参考写法
                //var queryParam = queryJson.ToJObject();
                // 虚拟参数
                //var dp = new DynamicParameters(new { });
                //dp.Add("startTime", queryParam["StartTime"].ToDate(), DbType.DateTime);
                var strSql = new StringBuilder();
                strSql.Append("SELECT ");
                strSql.Append(fieldSql);
                strSql.Append(" FROM Hy_Wl_ChangeShifts t left join lr_base_user u on t.f_userid=u.F_UserId left join lr_base_department d on u.F_TertiaryOrganization = d.F_DepartmentId left join dbo.Hy_Wl_OaReturnInfo o on t.f_no=o.f_no ");
                return this.BaseRepository().FindList<Hy_Wl_ChangeShiftsEntity>(strSql.ToString());
            }
            catch (Exception ex)
            {
                if (ex is ExceptionEx)
                {
                    throw;
                }
                else
                {
                    throw ExceptionEx.ThrowServiceException(ex);
                }
            }
        }

        /// <summary>
        /// 获取列表分页数据
        /// <param name="pagination">分页参数</param>
        /// <summary>
        /// <returns></returns>
        public IEnumerable<ChangeShiftsEntityDTO> GetPageList(Pagination pagination, string queryJson)
        {
            try
            {
                var strSql = new StringBuilder();
                var queryParam = queryJson.ToJObject();
                strSql.Append("SELECT ");
                strSql.Append(fieldSql);
                strSql.Append(" FROM Hy_Wl_ChangeShifts t left join lr_base_user u on t.f_userid=u.F_UserId left join lr_base_department d on u.F_TertiaryOrganization = d.F_DepartmentId left join dbo.Hy_Wl_OaReturnInfo o on t.f_no=o.f_no ");
                strSql.Append("  WHERE 1=1  ");
                // 虚拟参数
                var dp = new DynamicParameters(new { });
                if (!queryParam["StartTime"].IsEmpty() && !queryParam["EndTime"].IsEmpty())
                {
                    dp.Add("startTime", queryParam["StartTime"].ToDate(), DbType.DateTime);
                    dp.Add("endTime", queryParam["EndTime"].ToDate(), DbType.DateTime);
                    strSql.Append(" AND ( t.F_CreateDate >= @startTime AND t.F_CreateDate <= @endTime ) ");
                }
                if (!queryParam["F_EnCode"].IsEmpty())
                {
                    dp.Add("F_EnCode", "%" + queryParam["F_EnCode"].ToString() + "%", DbType.String);
                    strSql.Append(" AND u.F_EnCode Like @F_EnCode ");
                }
                if (!queryParam["F_FullName"].IsEmpty())
                {
                    dp.Add("F_FullName", "%" + queryParam["F_FullName"].ToString() + "%", DbType.String);
                    strSql.Append(" AND d.F_FullName Like @F_FullName ");
                }
                if (!queryParam["F_States"].IsEmpty())
                {
                    dp.Add("F_States", "%" + queryParam["F_States"].ToString() + "%", DbType.String);
                    strSql.Append(" AND o.F_States Like @F_States ");
                }
                return this.BaseRepository().FindList<ChangeShiftsEntityDTO>(strSql.ToString(),dp,pagination);
            }
            catch (Exception ex)
            {
                if (ex is ExceptionEx)
                {
                    throw;
                }
                else
                {
                    throw ExceptionEx.ThrowServiceException(ex);
                }
            }
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="entity"></param>
        /// <returns></returns>
        public ReturnComment UpdateEntity(Hy_Wl_ChangeShiftsEntity entity)
        {
            try
            {
                ReturnComment rc = new ReturnComment();
                int count = this.BaseRepository().Update(entity);
                if (count > 0)
                {
                    rc.State = "S";
                    rc.Mes = "修改流程状态成功";
                }
                else
                {
                    rc.State = "F";
                    rc.Mes = "修改流程状态失败";
                }
                return rc;
            }
            catch (Exception ex)
            {
                if (ex is ExceptionEx)
                {
                    throw;
                }
                else
                {
                    throw ExceptionEx.ThrowServiceException(ex);
                }
            }
        }


        /// <summary>
        /// 获取实体数据
        /// <param name="keyValue">主键</param>
        /// <summary>
        /// <returns></returns>
        public Hy_Wl_ChangeShiftsEntity GetEntity(string keyValue)
        {
            try
            {
                return this.BaseRepository().FindEntity<Hy_Wl_ChangeShiftsEntity>(keyValue);
            }
            catch (Exception ex)
            {
                if (ex is ExceptionEx)
                {
                    throw;
                }
                else
                {
                    throw ExceptionEx.ThrowServiceException(ex);
                }
            }
        }
        /// <summary>
        /// 获取页面显示子表数据
        /// <summary>
        /// <param name="queryJson">查询参数</param>
        /// <returns></returns>
        public IEnumerable<Hy_Wl_OaReturnInfo_itemEntity> GetSubList(string fno)
        {
            try
            {
                var strSql = new StringBuilder();
                strSql.Append("SELECT ");
                strSql.Append(@"
                u.F_RealName as F_TheApprover,
                a.F_Opinion,
                a.F_ApprovalTime ,
                a.F_whetherthrough 
                ");
                strSql.Append("  from lr_base_user u , Hy_Wl_OaReturnInfo_item  a ,Hy_Wl_ChangeShifts cs");
                strSql.Append("  WHERE a.f_no='" + fno + "'  and cs.F_no=a.F_no  and u.F_EnCode=a.F_TheApprover ");
                strSql.Append("  order by a.F_ApprovalTime ");
                return this.BaseRepository().FindList<Hy_Wl_OaReturnInfo_itemEntity>(strSql.ToString());
            }
            catch (Exception ex)
            {
                if (ex is ExceptionEx)
                {
                    throw;
                }
                else
                {
                    throw ExceptionEx.ThrowServiceException(ex);
                }
            }
        }
        /// <summary>
        /// 获取用户信息
        /// <summary>
        /// <param name="F_EnCode">查询参数</param>
        /// <returns></returns>
        public IEnumerable<UserEntityDTO> GetUserList(string F_UserId)
        {
            try
            {
                var strSql = new StringBuilder();
                strSql.Append("SELECT ");
                strSql.Append(@"* ");
                strSql.Append("  from lr_base_user ");
                strSql.Append("  WHERE F_UserId='" + F_UserId + "'");
                var userModel = this.BaseRepository().FindList<UserEntity>(strSql.ToString());
                var departmentModel = this.BaseRepository().FindList<DepartmentEntity>("select * from lr_base_department");
                var postModel = this.BaseRepository().FindList<PostEntity>("select * from lr_base_post");
                var newUserModel = from u in userModel
                                   select new UserEntityDTO
                                   {
                                       F_UserId = u.F_UserId,
                                       F_EnCode = u.F_EnCode,
                                       F_RealName = u.F_RealName,
                                       F_DateHoldingPost=u.F_DateHoldingPost,
                                       F_Education = u.F_Education,
                                       F_Gender = u.F_Gender == 1 ? "男" : "女",
                                       F_PostId = postModel.Where(e => e.F_PostId == u.F_PostId).Count() > 0 ? postModel.Where(e => e.F_PostId == u.F_PostId).FirstOrDefault().F_Name : "",
                                       F_SecondaryOrganization = departmentModel.Where(e => e.F_DepartmentId == u.F_SecondaryOrganization).Count() > 0 ? departmentModel.Where(e => e.F_DepartmentId == u.F_SecondaryOrganization).FirstOrDefault().F_FullName : "",
                                       F_TertiaryOrganization = departmentModel.Where(e => e.F_DepartmentId == u.F_TertiaryOrganization).Count() > 0 ? departmentModel.Where(e => e.F_DepartmentId == u.F_TertiaryOrganization).FirstOrDefault().F_FullName : "",
                                       F_FourLevelOrganization = departmentModel.Where(e => e.F_DepartmentId == u.F_FourLevelOrganization).Count() > 0 ? departmentModel.Where(e => e.F_DepartmentId == u.F_FourLevelOrganization).FirstOrDefault().F_FullName : "",

                                   };
                return newUserModel;
            }
            catch (Exception ex)
            {
                if (ex is ExceptionEx)
                {
                    throw;
                }
                else
                {
                    throw ExceptionEx.ThrowServiceException(ex);
                }
            }
        }

        /// <summary>
        /// 获取信息
        /// <summary>
        /// <param name="fid">查询参数</param>
        /// <returns></returns>
        public IEnumerable<UserChangeShiftsEntityDTO> GetUserChangeShiftsList(string fid)
        {
            try
            {
                var strSql = new StringBuilder();
                strSql.Append("SELECT ");
                strSql.Append(@"u.*,cs.*");
                strSql.Append(" from  dbo.Hy_Wl_ChangeShifts as cs left  join lr_base_user as u on cs.F_UserID=u.F_UserId  ");
                strSql.Append("  WHERE cs.F_ID='" + fid + "'");
                var userModel = this.BaseRepository().FindList<UserChangeShiftsEntityDTO>(strSql.ToString());
                var departmentModel = this.BaseRepository().FindList<DepartmentEntity>("select * from lr_base_department");
                var postModel = this.BaseRepository().FindList<PostEntity>("select * from lr_base_post");
                var newUserModel = from u in userModel
                                   select new UserChangeShiftsEntityDTO
                                   {
                                       F_UserID = u.F_UserID,
                                       F_EnCode = u.F_EnCode,
                                       F_RealName = u.F_RealName,
                                       F_DateHoldingPost = u.F_DateHoldingPost,
                                       F_Education = u.F_Education,
                                       F_Gender = u.F_Gender == "1" ? "男" : "女",
                                       F_PostId = postModel.Where(e => e.F_PostId == u.F_PostId).Count() > 0 ? postModel.Where(e => e.F_PostId == u.F_PostId).FirstOrDefault().F_Name : "",
                                       F_SecondaryOrganization = departmentModel.Where(e => e.F_DepartmentId == u.F_SecondaryOrganization).Count() > 0 ? departmentModel.Where(e => e.F_DepartmentId == u.F_SecondaryOrganization).FirstOrDefault().F_FullName : "",
                                       F_TertiaryOrganization = departmentModel.Where(e => e.F_DepartmentId == u.F_TertiaryOrganization).Count() > 0 ? departmentModel.Where(e => e.F_DepartmentId == u.F_TertiaryOrganization).FirstOrDefault().F_FullName : "",
                                       F_FourLevelOrganization = departmentModel.Where(e => e.F_DepartmentId == u.F_FourLevelOrganization).Count() > 0 ? departmentModel.Where(e => e.F_DepartmentId == u.F_FourLevelOrganization).FirstOrDefault().F_FullName : "",
                                       F_AssessmentDate = u.F_AssessmentDate,
                                       F_FiveAssessmentResults = u.F_FiveAssessmentResults,
                                       F_FiveLevelOrganization = u.F_FiveLevelOrganization,
                                       F_FiveReasonDescription = u.F_FiveReasonDescription,
                                       F_FourAssessmentResults = u.F_FourAssessmentResults,
                                       F_FourReasonDescription = u.F_FourReasonDescription,
                                       F_HumanResources = u.F_HumanResources,
                                       F_OneAssessmentResults = u.F_OneAssessmentResults,
                                       F_OneReasonDescription = u.F_OneReasonDescription,
                                       F_OperationBPM = u.F_OperationBPM,
                                       F_OperationCapability = u.F_OperationCapability,
                                       F_OperationCharge = u.F_OperationCharge,
                                       F_OperationDirector = u.F_OperationDirector,
                                       F_PersonnelCategory = u.F_PersonnelCategory,
                                       F_PrimaryOrganization = u.F_PrimaryOrganization,
                                       F_QualityManagement = u.F_QualityManagement,
                                       F_Responsibility = u.F_Responsibility,
                                       F_SixAssessmentResults = u.F_SixAssessmentResults,
                                       F_SixLevelOrganization = u.F_SixLevelOrganization,
                                       F_SixReasonDescription = u.F_SixReasonDescription,
                                       F_SUM = u.F_SUM,
                                       F_ThreeAssessmentResults = u.F_ThreeAssessmentResults,
                                       F_ThreeReasonDescription = u.F_ThreeReasonDescription,
                                       F_TrialDate = u.F_TrialDate,
                                       F_TwoAssessmentResults = u.F_TwoAssessmentResults,
                                       F_TwoReasonDescription = u.F_TwoReasonDescription,
                                       F_workingAttitude = u.F_workingAttitude,
                                       F_writtenExamination = u.F_writtenExamination
                                   };
                return newUserModel;
            }
            catch (Exception ex)
            {
                if (ex is ExceptionEx)
                {
                    throw;
                }
                else
                {
                    throw ExceptionEx.ThrowServiceException(ex);
                }
            }
        }
        /// <summary>
        /// 查询人员信息
        /// </summary>
        /// <param name="account"></param>
        /// <returns></returns>
        public ReturnCommon<IEnumerable<ChangeShiftForAccountDTO>> GetUserInfoForAccoount(string account)
        {
            var msg = new ReturnCommon<IEnumerable<ChangeShiftForAccountDTO>>();

            try
            {
                var strSql =string.Format(@"select c.F_Name Post,b.F_RealName UserName,b.F_EnCode JobNumber,d.F_FullName Department,a.F_PersonnelCategory JobType,
                                            isnull(case F_OneAssessmentResults when '否' then F_OneReasonDescription else '一级技能' end ,'') FirstSkill,
                                            isnull(case F_TwoAssessmentResults when '否' then F_TwoReasonDescription else '二级技能' end ,'') SecondSkill,
                                            isnull(case F_ThreeAssessmentResults when '否' then F_ThreeReasonDescription else '三级技能' end  ,'')ThirdSkill,
                                            isnull(case F_FourAssessmentResults when '否' then F_FourReasonDescription else '四级技能' end  ,'') FourthSkill,
                                            isnull(case F_FiveAssessmentResults when '否' then F_FiveReasonDescription else '五级技能' end ,'') FivethSkill,
											isnull(case F_SixAssessmentResults when '否' then F_SixReasonDescription else '08005专干' end ,'') SixthSkill,
                                            isnull(u.F_RealName,'') OperationDirector,isnull(s.F_RealName,'') OperationCharge,isnull(F_TrialDate,'') TrialDate
                                            from Hy_Wl_ChangeShifts a left join lr_base_user b on a.F_UserID=b.F_UserId
                                            left join lr_base_post c on c.F_PostId=b.F_PostId left join lr_base_department d on b.F_SecondaryOrganization=d.F_DepartmentId
											left join Hy_Wl_OaReturnInfo_item i on (a.F_NO=i.F_NO and i.F_CheckpointName='3.部门主管')
											left join Hy_Wl_OaReturnInfo_item l on (a.F_NO=l.F_NO and l.F_CheckpointName='4.部门负责人')
											left join [dbo].[lr_base_user] u on i.F_TheApprover=u.F_EnCode
											left join [dbo].[lr_base_user] s on l.F_TheApprover=s.F_EnCode
                                            where b.F_EnCode='{0}'", account);
                var userModel = this.BaseRepository().FindList<ChangeShiftForAccountDTO>(strSql);
                if (userModel.Count() > 0)
                {
                    msg.Status = true;
                    msg.Data = userModel;
                }
                else 
                {
                    msg.Status = false;
                    msg.Message = "未找到当前用户("+account+")认证表信息";
                }
                return msg;
            }
            catch (Exception ex)
            {
                msg.Status = false;
                msg.Message = ex.Message;
            }

            return msg;
        }

        #endregion

        #region 提交数据

        /// <summary>
        /// 删除实体数据
        /// <param name="keyValue">主键</param>
        /// <summary>
        /// <returns></returns>
        public void DeleteEntity(string keyValue)
        {
            try
            {
                this.BaseRepository().Delete<Hy_Wl_ChangeShiftsEntity>(t=>t.F_ID == keyValue);
            }
            catch (Exception ex)
            {
                if (ex is ExceptionEx)
                {
                    throw;
                }
                else
                {
                    throw ExceptionEx.ThrowServiceException(ex);
                }
            }
        }

        /// <summary>
        /// 保存实体数据（新增、修改）
        /// <param name="keyValue">主键</param>
        /// <summary>
        /// <returns></returns>
        public ReturnComment SaveEntity(string keyValue, Hy_Wl_ChangeShiftsEntity entity)
        {
            try
            {
                ReturnComment rc = new ReturnComment();
                var strSql = new StringBuilder();
                strSql.Append("SELECT ");
                strSql.Append(@"* ");
                strSql.Append("  from lr_base_user ");
                strSql.Append("  WHERE F_EnCode='" + keyValue + "'");
                var userModel = this.BaseRepository().FindList<UserEntity>(strSql.ToString());
                entity.F_UserID = userModel.First().F_UserId;
                //重复提交
                var ChangeShifts = this.BaseRepository().FindEntity<Hy_Wl_ChangeShiftsEntity>(t => t.F_UserID == entity.F_UserID);
                if (ChangeShifts != null) 
                {
                    _return.State = "false";
                    _return.Mes = "该员工已申请";
                    return _return;
                } else { 
                if (!string.IsNullOrEmpty(keyValue))
                {
                    entity.Create();
                    //entity.F_UserID = userModel.First().F_UserId;
                    entity.F_NO = "CS-" + DateTime.Now.ToString("yyMMdHHmmss");
                    entity.F_SUM = entity.F_writtenExamination + entity.F_OperationCapability + entity.F_workingAttitude + entity.F_Responsibility;
                    entity.F_IsDownload = "否";
                    int count = this.BaseRepository().Insert(entity);
                    if (count > 0)
                    {
                        WorkPermitModuleCreateOAIBLL<Hy_Wl_ChangeShiftsEntity> workPermitModuleCreateOABLL = new WorkPermitModuleCreateOABLL<Hy_Wl_ChangeShiftsEntity>();
                         rc = workPermitModuleCreateOABLL.crateOAandHRForm(entity);
                        if ("S".Equals(rc.State))
                        {
                            return rc;
                        }
                        else
                        {
                            return rc;
                        }
                    }

                }
                else
                {
                   
                }
                }
                return rc;
            }
            catch (Exception ex)
            {
                if (ex is ExceptionEx)
                {
                    throw;
                }
                else
                {
                    throw ExceptionEx.ThrowServiceException(ex);
                }
            }
        }
        #endregion

    }
}
