using Dapper;
using Learun.Application.TwoDevelopment.Platform.Hy_Recruit_ProcessOperation;
using Learun.Application.TwoDevelopment.Platform.RecruitSubProcessEntity;
using Learun.Application.TwoDevelopment.Platform.WL_BaseService;
using Learun.Application.TwoDevelopment.ReturnModel;
using Learun.DataBase.Repository;
using Learun.Util;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;

namespace Learun.Application.TwoDevelopment.Platform
{
    /// <summary>
    /// 版 本 Learun-ADMS V7.0.3 力软敏捷开发框架
    /// Copyright (c) 2013-2018 上海力软信息技术有限公司
    /// 创 建：超级管理员
    /// 日 期：2021-12-31 10:54
    /// 描 述：RWrittenExamination
    /// </summary>
    public class RWrittenExaminationService : RepositoryFactory
    {
        #region 构造函数和属性

        private string fieldSql;
        public RWrittenExaminationService()
        {
            fieldSql=@"
                t.F_EnabledMark,
                t.F_CreateUserId,
                t.F_ModifyUserName,
                t.F_ModifyUserId,
                t.F_DeleteMark,
                t.F_SortCode,
                t.F_ModifyDate,
                t.F_CreateUserName,
                t.F_CreateDate,
                t.F_Description,
                t.F_Id,
                t.F_Score,
                t.F_WrittenTestQuestionBankId,
                t.F_CandidatesID,
                t.F_IDCard
            ";
        }
        #endregion

        #region 获取数据

        /// <summary>
        /// 获取列表数据
        /// <summary>
        /// <returns></returns>
        public IEnumerable<Hy_Recruit_WrittenExaminationEntity> GetList( string queryJson )
        {
            try
            {
                //参考写法
                //var queryParam = queryJson.ToJObject();
                // 虚拟参数
                //var dp = new DynamicParameters(new { });
                //dp.Add("startTime", queryParam["StartTime"].ToDate(), DbType.DateTime);
                var strSql = new StringBuilder();
                strSql.Append("SELECT ");
                strSql.Append(fieldSql);
                strSql.Append(" FROM Hy_Recruit_WrittenExamination t ");
                return this.BaseRepository().FindList<Hy_Recruit_WrittenExaminationEntity>(strSql.ToString());
            }
            catch (Exception ex)
            {
                if (ex is ExceptionEx)
                {
                    throw;
                }
                else
                {
                    throw ExceptionEx.ThrowServiceException(ex);
                }
            }
        }

        /// <summary>
        /// 获取列表分页数据
        /// <param name="pagination">分页参数</param>
        /// <summary>
        /// <returns></returns>
        public IEnumerable<Hy_Recruit_WrittenExaminationEntity> GetPageList(Pagination pagination, string queryJson)
        {
            try
            {
                var strSql = new StringBuilder();
                strSql.Append("SELECT ");
                strSql.Append(fieldSql);
                strSql.Append(" FROM Hy_Recruit_WrittenExamination t ");
                var queryParam = queryJson.ToJObject();
                // 虚拟参数
                var dp = new DynamicParameters(new { });
                if (!queryParam["F_RealName"].IsEmpty())
                {
                    dp.Add("F_RealName", "%" + queryParam["F_RealName"].ToString() + "%", DbType.String);
                    strSql.Append(" AND c.F_RealName Like @F_RealName ");
                }
                //if (!queryParam["F_Score"].IsEmpty())
                //{
                //    int F_Score;
                //    if (queryParam["F_Score"].ToString() == "通过") { F_Score = 80; dp.Add("F_Score", F_Score, DbType.String);
                //        strSql.Append(" AND t.F_Score >= @F_Score ");
                //    } else { F_Score = 70;
                //        dp.Add("F_Score", F_Score, DbType.String);
                //        strSql.Append(" AND t.F_Score < @F_Score ");
                //    }

                //}
                if (!queryParam["F_IDCard"].IsEmpty())
                {
                    dp.Add("F_IDCard", "%" + queryParam["F_IDCard"].ToString() + "%", DbType.String);
                    strSql.Append(" AND t.F_IDCard like @F_IDCard ");
                }
                return this.BaseRepository().FindList<Hy_Recruit_WrittenExaminationEntity>(strSql.ToString(),dp, pagination);
            }
            catch (Exception ex)
            {
                if (ex is ExceptionEx)
                {
                    throw;
                }
                else
                {
                    throw ExceptionEx.ThrowServiceException(ex);
                }
            }
        }

        /// <summary>
        /// 获取实体数据
        /// <param name="keyValue">主键</param>
        /// <summary>
        /// <returns></returns>
        public Hy_Recruit_WrittenExaminationEntity GetEntity(string keyValue)
        {
            try
            {
                return this.BaseRepository().FindEntity<Hy_Recruit_WrittenExaminationEntity>(keyValue);
            }
            catch (Exception ex)
            {
                if (ex is ExceptionEx)
                {
                    throw;
                }
                else
                {
                    throw ExceptionEx.ThrowServiceException(ex);
                }
            }
        }

        #endregion

        #region 提交数据

        /// <summary>
        /// 删除实体数据
        /// <param name="keyValue">主键</param>
        /// <summary>
        /// <returns></returns>
        public void DeleteEntity(string keyValue)
        {
            try
            {
                this.BaseRepository().Delete<Hy_Recruit_WrittenExaminationEntity>(t=>t.F_Id == keyValue);
            }
            catch (Exception ex)
            {
                if (ex is ExceptionEx)
                {
                    throw;
                }
                else
                {
                    throw ExceptionEx.ThrowServiceException(ex);
                }
            }
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="keyValue"></param>
        /// <param name="entity"></param>
        /// <returns></returns>
        public ReturnCommon NodeSaveEntity(IRepository db, string keyValue, Hy_Recruit_WrittenExaminationEntity entity)
        {
            ReturnCommon rc = new ReturnCommon();
            try
            {
                if (string.IsNullOrEmpty(keyValue))
                {
                    db.Insert(entity);
                    db.Commit();
                    rc.Status = true;
                    rc.Message = "身份验证成功,生成面试流程节点";
                }
                return rc;
            }
            catch (Exception ex)
            {
                rc.Status = false;
                rc.Message = "生成面试流程节点数据失败";
                db.Rollback();
                if (ex is ExceptionEx)
                {
                    throw;
                }
                else
                {
                    throw ExceptionEx.ThrowServiceException(ex);
                }
            }
        }
        /// <summary>
        /// 保存实体数据（新增、修改）
        /// <param name="keyValue">主键</param>
        /// <summary>
        /// <returns></returns>
        public ReturnCommon SaveEntity(string keyValue, Hy_Recruit_WrittenExaminationEntity entity)
        {
            ReturnCommon rc = new ReturnCommon();
            try
            {
                var newusermodel = this.BaseRepository().FindList<Hy_Recruit_CandidatesEntity>(t => t.F_UserId == entity.F_CandidatesID);
                Hy_hr_InterviewEntity ie = new Hy_hr_InterviewEntity();
                InterviewService s = new InterviewService();
                if (!string.IsNullOrEmpty(keyValue))
                {
                    entity.Modify(keyValue);
                    entity.F_IDCard = newusermodel.First().F_IDCard;
                    this.BaseRepository().Update(entity);
                    if (entity.F_Score >= 80)
                    {
                        ie.Create();
                        ie.F_CandidatesID = entity.F_CandidatesID;
                        s.SaveEntity(null, ie);
                    }
                    //写流程状态表
                    BaseService bsService = new BaseService();
                    Hy_Recruit_SubProcessEntity hsEntity = bsService.getHy_Recruit_SubProcessEntity("笔试");
                    var data = bsService.GetProcessInfo(hsEntity.ID);
                    ProcessOperationInfoIBLL poBLL = new ProcessOperationInfoBLL();
                    rc= poBLL.SaveNodeInfoEntity(data, entity.F_CandidatesID, hsEntity.ID, hsEntity.Name);
                }
                else
                {
                    entity.Create();
                    entity.F_IDCard = newusermodel.First().F_IDCard;
                    this.BaseRepository().Insert(entity);
                    if (entity.F_Score >= 80)
                    {
                        ie.Create();
                        ie.F_CandidatesID = entity.F_CandidatesID;
                        s.SaveEntity(null, ie);
                    }
                    //写流程状态表
                    BaseService bsService = new BaseService();
                    Hy_Recruit_SubProcessEntity hsEntity = bsService.getHy_Recruit_SubProcessEntity("笔试");
                    var data = bsService.GetProcessInfo(hsEntity.ID);
                    ProcessOperationInfoIBLL poBLL = new ProcessOperationInfoBLL();
                    rc= poBLL.SaveNodeInfoEntity(data, entity.F_CandidatesID, hsEntity.ID, hsEntity.Name);
                }
            }
            catch (Exception ex)
            {
                if (ex is ExceptionEx)
                {
                    throw;
                }
                else
                {
                    throw ExceptionEx.ThrowServiceException(ex);
                }
            }
            return rc;
        }

        #endregion

    }
}
