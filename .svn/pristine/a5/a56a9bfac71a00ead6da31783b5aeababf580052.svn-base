using Dapper;
using Learun.DataBase.Repository;
using Learun.Util;
using System;
using System.Collections.Generic;
using System.Data;
using System.Text;

namespace Learun.Application.TwoDevelopment.HR_SocialRecruitment
{
    /// <summary>
    /// 版 本 Learun-ADMS V7.0.3 力软敏捷开发框架
    /// Copyright (c) 2013-2018 上海力软信息技术有限公司
    /// 创 建：超级管理员
    /// 日 期：2021-10-28 10:05
    /// 描 述：简历审批结果查询
    /// </summary>
    public class RecruitmentProcessService : RepositoryFactory
    {
        #region 获取数据

        /// <summary>
        /// 获取页面显示列表数据
        /// <summary>
        /// <param name="queryJson">查询参数</param>
        /// <returns></returns>
        public IEnumerable<SR_RecruitmentProcessNodeEntity> GetPageList(Pagination pagination, string queryJson)
        {
            try
            {
                var strSql = new StringBuilder();
                strSql.Append("SELECT ");
                strSql.Append(@"
                t.F_ID,
                t.F_HrIndicatesOrderNumber,
                m.F_fileName as F_ResumeName,
                t.F_TheApprover,
                p.F_ApprovalTime,
                t.F_Description,
                m.F_State as F_WhetherThrough
                ");
                strSql.Append("  FROM SR_RecruitmentProcessNode t , SR_ProcessNode p , SR_ProcessAttachment ");
                strSql.Append("  WHERE 1=1 and p.F_ID=t.F_ID   and  t.F_ID=m.F_ID ");
                var queryParam = queryJson.ToJObject();
                // 虚拟参数
                var dp = new DynamicParameters(new { });
                if (!queryParam["StartTime"].IsEmpty() && !queryParam["EndTime"].IsEmpty())
                {
                    dp.Add("startTime", queryParam["StartTime"].ToDate(), DbType.DateTime);
                    dp.Add("endTime", queryParam["EndTime"].ToDate(), DbType.DateTime);
                    strSql.Append(" AND ( p.F_ApprovalTime >= @startTime AND p.F_ApprovalTime <= @endTime ) ");
                }
                if (!queryParam["F_HrIndicatesOrderNumber"].IsEmpty())
                {
                    dp.Add("F_HrIndicatesOrderNumber", "%" + queryParam["F_HrIndicatesOrderNumber"].ToString() + "%", DbType.String);
                    strSql.Append(" AND t.F_HrIndicatesOrderNumber Like @F_HrIndicatesOrderNumber ");
                }
                if (!queryParam["F_WhetherThrough"].IsEmpty())
                {
                    dp.Add("F_WhetherThrough", "%" + queryParam["F_WhetherThrough"].ToString() + "%", DbType.String);
                    strSql.Append(" AND t.F_WhetherThrough Like @F_WhetherThrough ");
                }
                if (!queryParam["F_ApprovalTime"].IsEmpty())
                {
                    dp.Add("F_ApprovalTime",queryParam["F_ApprovalTime"].ToString(), DbType.String);
                    strSql.Append(" AND p.F_ApprovalTime = @F_ApprovalTime ");
                }
                return this.BaseRepository("SRDB").FindList<SR_RecruitmentProcessNodeEntity>(strSql.ToString(),dp, pagination);
            }
            catch (Exception ex)
            {
                if (ex is ExceptionEx)
                {
                    throw;
                }
                else
                {
                    throw ExceptionEx.ThrowServiceException(ex);
                }
            }
        }

        /// <summary>
        /// 获取SR_RecruitmentProcessNode表实体数据
        /// <param name="keyValue">主键</param>
        /// <summary>
        /// <returns></returns>
        public SR_RecruitmentProcessNodeEntity GetSR_RecruitmentProcessNodeEntity(string keyValue)
        {
            try
            {
                return this.BaseRepository("SRDB").FindEntity<SR_RecruitmentProcessNodeEntity>(keyValue);
            }
            catch (Exception ex)
            {
                if (ex is ExceptionEx)
                {
                    throw;
                }
                else
                {
                    throw ExceptionEx.ThrowServiceException(ex);
                }
            }
        }


        /// <summary>
        /// 获取页面显示子表数据
        /// <summary>
        /// <param name="queryJson">查询参数</param>
        /// <returns></returns>
        public IEnumerable<SR_ApprovalProcessEntity> GetSubList(string fid)
        {
            try
            {
                var strSql = new StringBuilder();
                strSql.Append("SELECT ");
                strSql.Append(@"
                p.f_id,
                u.F_RealName as F_Approver,
                p.F_ApprovalTime as F_ApprovalDate,
                p.F_WhetherThrough as F_ApprovalResults,
                p.F_Opinion as F_ApprovalComments
                ");
                strSql.Append("  from  dbo.SR_ProcessNode p left join  HYDatabase.dbo.lr_base_user u on p.F_TheApprover=u.F_EnCode left  join SR_RecruitmentProcessNode rn on p.F_ID=rn.F_ID ");
                strSql.Append("  WHERE p.f_id='"+fid+"' ");
                strSql.Append("  order by F_ApprovalDate ");
                return this.BaseRepository("SRDB").FindList<SR_ApprovalProcessEntity>(strSql.ToString());
            }
            catch (Exception ex)
            {
                if (ex is ExceptionEx)
                {
                    throw;
                }
                else
                {
                    throw ExceptionEx.ThrowServiceException(ex);
                }
            }
        }
        #endregion

        #region 提交数据

        /// <summary>
        /// 删除实体数据
        /// <param name="keyValue">主键</param>
        /// <summary>
        /// <returns></returns>
        public void DeleteEntity(string keyValue)
        {
            try
            {
                this.BaseRepository("SRDB").Delete<SR_RecruitmentProcessNodeEntity>(t=>t.F_ID == keyValue);
            }
            catch (Exception ex)
            {
                if (ex is ExceptionEx)
                {
                    throw;
                }
                else
                {
                    throw ExceptionEx.ThrowServiceException(ex);
                }
            }
        }

        /// <summary>
        /// 保存实体数据（新增、修改）
        /// <param name="keyValue">主键</param>
        /// <summary>
        /// <returns></returns>
        public void SaveEntity(string keyValue, SR_RecruitmentProcessNodeEntity entity)
        {
            try
            {
                if (!string.IsNullOrEmpty(keyValue))
                {
                    entity.Modify(keyValue);
                    this.BaseRepository("SRDB").Update(entity);
                }
                else
                {
                    entity.Create();
                    this.BaseRepository("SRDB").Insert(entity);
                }
            }
            catch (Exception ex)
            {
                if (ex is ExceptionEx)
                {
                    throw;
                }
                else
                {
                    throw ExceptionEx.ThrowServiceException(ex);
                }
            }
        }

        #endregion

    }
}
